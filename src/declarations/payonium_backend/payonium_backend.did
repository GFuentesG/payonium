type Role = 
 variant {
   admin;
   assistant;
   operator;
   superadmin;
   user;
 };
type Profile = 
 record {
   countryorigindocument: text;
   countryresidence: text;
   dni: text;
   email: text;
   lastname: text;
   name: text;
   owner: principal;
   password: text;
   phone: text;
   role: Role;
 };
type GetProfileResultOk = 
 variant {
   profile: Profile;
   profiles: vec Profile;
   userSuccessfullyAdded;
   userSuccessfullyDeleted;
 };
type GetProfileResultErr = 
 variant {
   countryDataNotFound;
   unregisteredUser_nameOrEmailIsInvalid;
   userDoesNotExist;
   userNotAuthenticated;
 };
type GetProfileResult = 
 variant {
   err: GetProfileResultErr;
   ok: GetProfileResultOk;
 };
service : {
  getProfiles: () -> (GetProfileResult) query;
  greet: (text) -> (text) query;
  registerUser: (Profile) -> (GetProfileResult);
  whoAmI: () -> (principal) query;
}
